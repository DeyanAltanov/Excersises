Remove Negatives and Reverse
Read an array of integers, remove all negative numbers from it and print the remaining elements in reversed order. In case of no elements left in the array, print "empty".

Sum Adjacent Equal Numbers
Write a program to sum all adjacent equal numbers in a array of real numbers, starting from left to right. 
-After two numbers are summed, the obtained result could be equal to some of its neighbors and should be summed as well (see the examples below).
-Always sum the leftmost two equal neighbors (if several couples of equal neighbors are available).

Gauss' Trick
Write a program that sum all numbers in an array in the following order: 
first + last, first + 1 + last - 1, first + 2 + last - 2, … first + n, last - n.

Array of products
Read a number n and n lines of products. Print a numbered array of all the products ordered by name.

Array Manipulation Basics
Write a program that reads an array of integers. Then until you receive "end", you will be given different commands:
Add {number}: add a number to the end of the array
Remove {number}: remove number from the array
RemoveAt {index}: removes number at a given index
Insert {number} {index}: inserts a number at a given index
Note: All the indices will be valid!
When you receive the "end" command print the final state of the array (separated by spaces).

Array Manipulation Advanced
Now we need to extend the functionality of the previous task and we will implement more complicated array commands. Again, read an array, and until you receive "end" read commands:
Contains {number} – check if the array contains the number. If yes print "Yes", otherwise print "No such number"
Print even – print all the numbers that are even separated by a space
Print odd – print all the numbers that are odd separated by a space
Get sum – print the sum of all the numbers
Filter ({condition} {number}) – print all the numbers that fulfill that condition. The condition will be either '<', '>', ">=", "<="

Merging Arrays
You are going to receive two arrays with numbers. Create a result array which contains the numbers from both of the arrays. The first element should be from the first array, the second from the second array and so on. If the length of the two arrays are not equal, just add the remaining elements at the end of the array.

Train
On the first line you will be given a list of wagons (integers). Each integer represents the number of passengers that are currently in each wagon. On the next line you will get the max capacity of each wagon (single integer). Until you receive "end" you will be given two types of input:
•	Add {passengers} – add a wagon to the end with the given number of passengers.
•	{passengers} -  find an existing wagon to fit all the passengers (starting from the first wagon)
At the end print the final state of the train (all the wagons separated by a space).

Change Array
Write a program, which reads an array of integers from the console and receives commands, which manipulate the array. Your program may receive the following commands: 
•	Delete {element} – delete all elements in the array, which are equal to the given element
•	Insert {element} {position} – insert element and the given position
You should stop the program when you receive the command Odd or Even. If you receive Odd -> print all odd numbers in the array separated with single whitespace, otherwise print the even numbers.

House Party
Write a program that keeps track of guests that are going to a house party. On the first input line, you are going to receive how many commands you are going to have. On the next lines, you are going to receive some of the following inputs:
"{name} is going!"
"{name} is not going!"
If you receive the first type of input, you have to add the person if he/she is not in the list (If he/she is in the list print on the console: "{name} is already in the list!"). If you receive the second type of input, you have to remove the person if he/she is in the list (if not print: "{name} is not in the list!"). At the end print each guest on a new line.

Array Advanced Operations
You will be given an array of integer numbers on the first input line. Until you receive "End”, you will be given operations you have to apply on the array. The possible commands are:
•	Add {number} - add number at the end
•	Insert {number} {index} - insert number at given index
•	Remove {index} - remove at index
•	Shift left {count} - first number becomes last – count times
•	Shift right {count} - last number becomes first - count times
Note: it is possible that the index given is outside of the bounds of the array.
In that case, print "Invalid index"

Bomb Numbers
Write a program that reads sequence of numbers and special bomb number with a certain power. Your task is to detonate every occurrence of the special bomb number and according to its power his neighbors from left and right. Detonations are performed from left to right and all detonated numbers disappear. Finally print the sum of the remaining elements in the sequence.

Integer Insertion
You will receive an array of integers on the same line (separated by one space). On the next lines, you will start receiving an array of strings, until you receive the string "end". Your task is to insert each string (converted to integer) at a specific index in the array. The index is determined by the first digit of the number.
Example: 514 -> first digit – 5 -> insert 514 at the 5th index of the array.
After you insert all the elements, print the array, separated by single spaces.
Constrains
The input will always be valid and you do not need to explicitly check if you are inserting an element into a valid index.

Sum Reversed Numbers
Write a program that reads sequence of numbers, reverses their digits, and prints their sum.

Anonymous Threat
The Anonymous have created a cyber hypervirus which steals data from the CIA. You, as the lead security developer in CIA, have been tasked to analyze the software of the virus and observe its actions on the data. The virus is known for his innovative and unbeleivably clever technique of merging and dividing data into partitions. 
You will receive a single input line containing STRINGS separated by spaces. 
The strings may contain any ASCII character except whitespace.
You will then begin receiving commands in one of the following formats:
•	merge {startIndex} {endIndex}
•	divide {index} {partitions}
Every time you receive the merge command, you must merge all elements from the startIndex, till the endIndex. In other words, you should concatenate them. 
Example: {abc, def, ghi} -> merge 0 1 -> {abcdef, ghi}
If any of the given indexes is out of the array, you must take ONLY the range that is INSIDE the array and merge it.
Every time you receive the divide command, you must DIVIDE the element at the given index, into several small substrings with equal length. The count of the substrings should be equal to the given partitions. 
Example: {abcdef, ghi, jkl} -> divide 0 3 -> {ab, cd, ef, ghi, jkl}
If the string CANNOT be exactly divided into the given partitions, make all partitions except the LAST with EQUAL LENGTHS, and make the LAST one – the LONGEST. 
Example: {abcd, efgh, ijkl} -> divide 0 3 -> {a, b, cd, efgh, ijkl}
The input ends when you receive the command “3:1”. At that point you must print the resulting elements, joined by a space.
Input
•	The first input line will contain the array of data.
•	On the next several input lines you will receive commands in the format specified above.
•	The input ends when you receive the command “3:1”.
Output
•	As output you must print a single line containing the elements of the array, joined by a space.
Constrains
•	The strings in the array may contain any ASCII character except whitespace.
•	The startIndex and the endIndex will be in range [-1000, 1000].
•	The endIndex will ALWAYS be GREATER than the startIndex.
•	The index in the divide command will ALWAYS be INSIDE the array.
•	The partitions will be in range [0, 100].
•	Allowed working time/memory: 100ms / 16MB.

Pokemon Don’t Go
Ely likes to play Pokemon Go a lot. But Pokemon Go bankrupted … So the developers made Pokemon Don’t Go out of depression. And so Ely now plays Pokemon Don’t Go. In Pokemon Don’t Go, when you walk to a certain pokemon, those closer to you, naturally get further, and those further from you, get closer.
You will receive a sequence of integers, separated by spaces – the distances to the pokemons.
Then you will begin receiving integers, which will correspond to indexes in that sequence.
When you receive an index, you must remove the element at that index from the sequence (as if you’ve captured the pokemon).
•	You must INCREASE the value of all elements in the sequence which are LESS or EQUAL to the removed element, with the value of the removed element.
•	You must DECREASE the value of all elements in the sequence which are GREATER than the removed element, with the value of the removed element.
If the given index is LESS than 0, remove the first element of the sequence, and COPY the last element to its place.
If the given index is GREATER than the last index of the sequence, remove the last element from the sequence, and COPY the first element to its place.
The increasing and decreasing of elements should be done in these cases, also. The element, whose value you should use is the REMOVED element.
The program ends when the sequence has no elements (there are no pokemons left for Ely to catch).
Input
•	On the first line of input you will receive a sequence of integers, separated by spaces.
•	On the next several lines you will receive integers – the indexes.
Output
•	When the program ends, you must print on the console, the summed up value of all REMOVED elements.
Constrains
•	The input data will consist ONLY of valid integers in the range [-2.147.483.648, 2.147.483.647].

Course Planning
On the first input line you will receive the initial schedule of lessons and exercises that are going to be part of the next course, separated by comma and space ", ". However, before the course starts, there are some changes to be made. Until you receive "course start”, you will be given some commands to modify the course schedule. The possible commands are: 
-	Add:{lessonTitle} – add the lesson to the end of the schedule, if it does not exist.
-	Insert:{lessonTitle}:{index} – insert the lesson to the given index, if it does not exist.
-	Remove:{lessonTitle} – remove the lesson, if it exists.
-	Swap:{lessonTitle}:{lessonTitle} – change the place of the two lessons, if they exist.
-	Exercise:{lessonTitle} – add Exercise in the schedule right after the lesson index, if the lesson exists and there is no exercise already, in the following format "{lessonTitle}-Exercise". If the lesson doesn`t exist, Add the lesson in the end of the course schedule, followed by the Exercise.
Each time you Swap or Remove a lesson, you should do the same with the Exercises, if there are any, which follow the lessons.
Input / Constraints
•	first line – the initial schedule lessons – strings, separated by comma and space ", "
•	until "course start" you will receive commands in the format described above
Output
•	Print the whole course schedule, each lesson on a new line with its number(index) in the schedule: 
"{lesson index}.{lessonTitle}"
•	Allowed working time / memory: 100ms / 16MB.
