Day of Week
Enter a day number [1…7] and print the day name (in English) or “Invalid Day!“. Use an array of strings.

Print Numbers in Reverse Order
Read n numbers and print them in reverse order.

Rounding Numbers
Read an array of real numbers (space separated), round them in "away from 0" style and print the output as in the example: "0.90 => 1". "0.90" is rounded to the second decimal place.

Reverse an Array of Strings
Write a program to read an array of strings, reverse it and print its elements. The input consists of a sequence of space separated strings. Print the output on a single line (space separated).

Sum Even Numbers
Read an array from the console and sum only the even numbers.

Even and Odd Subtraction
Write a program that calculates the difference between the sum of the even and the sum of the odd numbers in an array.

Equal Arrays
Read two arrays and print on the console whether they are identical or not. Arrays are identical if their elements are equal. If the arrays are identical find the sum of the first one and print on the console following message: "Arrays are identical. Sum: {sum}", otherwise find the first index where the arrays differ and print on the console following message: "Arrays are not identical. Found difference at {index} index".

Condense Array to Number
Write a program to read an array of integers and condense them by summing adjacent couples of elements until a single integer is obtained. For example, if we have 3 elements {2, 10, 3}, we sum the first two and the second two elements and obtain {2+10, 10+3} = {12, 13}, then we sum again all adjacent elements and obtain {12+13} = {25}.

Train
You will be given a count of wagons in a train n. On the next n lines you will receive how many people are going to get on that wagon. At the end print the whole train and after that the sum of the people in the train. 

Common Elements
Write a program, which prints common elements in two arrays. You have to compare the elements of the second array to the elements of the first.

Zig-Zag Arrays
Write a program which creates 2 arrays. You will be given an integer n. On the next n lines you get 2 integers. Form 2 arrays as shown below.

Array Rotation
Write a program that receives an array and number of rotations you have to perform (first element goes at the end) Print the resulting array.

Top Integers
Write a program to find all the top integers in an array. A top integer is an integer which is bigger than all the elements to its right.

Equal Sums
Write a program that determines if there exists an element in the array such that the sum of the elements on its left is equal to the sum of the elements on its right. If there are no elements to the left / right, their sum is considered to be 0. Print the index that satisfies the required condition or “no” if there is no such index.

Max Sequence of Equal Elements
Write a program that finds the longest sequence of equal elements in an array of integers. If several longest sequences exist, print the leftmost one.

Magic Sum
Write a program, which prints all unique pairs in an array of integers whose sum is equal to a given number.

Easter Gifts
As a good friend, you decide to buy presents for your friends.
Create a program that helps you plan the gifts for your friends and family. First, you are going to receive the gifts you plan on buying оn a single line, separated by space, in the following format:
"{gift1} {gift2} {gift3}… {giftn}"
Then you will start receiving commands until you read the "No Money" message. There are three possible commands:
•	"OutOfStock {gift}"
•	Find the gifts with this name in your collection, if there are any, and change their values to "None".  
•	"Required {gift} {index}"
•	Replace the value of the current gift on the given index with this gift, if the index is valid. 
•	"JustInCase {gift}"
•	Replace the value of your last gift with this one. 
In the end, print the gifts on a single line, except the ones with value "None", separated by a single space in the following format:
"{gift1} {gift2} {gift3}… {giftn}"
Input / Constraints
•	On the 1st line you are going to receive the names of the gifts, separated by a single space.
•	On the next lines, until the "No Money" command is received, you will be receiving commands.
•	The input will always be valid.
Output
•	Print the gifts in the format described above.

Encrypt, Sort and Print Array
Write a program that reads a sequence of strings from the console. Encrypt every string by summing:
•	The code of each vowel multiplied by the string length
•	The code of each consonant divided by the string length
Sort the number sequence in ascending order and print it on the console.
On first line, you will always receive the number of strings you have to read.

Pascal Triangle
The triangle may be constructed in the following manner: In row 0 (the topmost row), there is a unique nonzero entry 1. Each entry of each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating blank entries as 0. For example, the initial number in the first (or any other) row is 1 (the sum of 0 and 1), whereas the numbers 1 and 3 in the third row are added to produce the number 4 in the fourth row.
Print each row elements separated with whitespace.

Recursive Fibonacci
The Fibonacci sequence is quite a famous sequence of numbers. Each member of the sequence is calculated from the sum of the two previous elements. The first two elements are 1, 1. Therefore the sequence goes as 1, 1, 2, 3, 5, 8, 13, 21, 34…
The following sequence can be generated with an array, but that’s easy, so your task is to implement recursively.
So if the function GetFibonacci(n) returns the n’th Fibonacci number we can express it using                 GetFibonacci(n) = GetFibonacci(n-1) + GetFibonacci(n-2).
However, this will never end and in a few seconds a StackOverflow Exception is thrown. In order for the recursion to stop it has to have a “bottom”. The bottom of the recursion is GetFibonacci(2) should return 1 and GetFibonacci(1) should return 1.
Input Format:
•	On the only line in the input the user should enter the wanted Fibonacci number.
Output Format:
•	The output should be the n’th Fibonacci number counting from 1.
Constraints:
•	1 ≤ N ≤ 50

Jump Around
You will receive an integer array from the console. You start from the beginning of the array and try to move right by a step, equal to the value at position 0. If that is possible you should collect the value from the index on which you landed, and try to move to the right by its value, if that is not possible – try to move to the left. If that is also not possible stop the program and print the sum of the collected values. Example:
Example: We have the array [3 7 12 2 10]. We start from 3 and move 3 indices to 2. We have to move 2 indices, but we can’t move to the right, so we move to the left to 7. From there we cannot move anywhere and we stop the program and we print the sum of the collected cells: 3 + 2 + 7 = 12
Input
The input consists of single line, which will be an array of integers.
Constraints
•	The array will have at most 50 elements
•	The elements in the array will be in the interval [1…50]

Longest Increasing Subsequence (LIS)
Read a list of integers and find the longest increasing subsequence (LIS). If several such exist, print the leftmost.

Kamino Factory
The clone factory in Kamino got another order to clone troops. But this time you are tasked to find the best DNA sequence to use in the production. 
You will receive the DNA length and until you receive the command "Clone them!" you will be receiving a DNA sequences of ones and zeroes, split by "!" (one or several).
You should select the sequence with the longest subsequence of ones. If there are several sequences with same length of subsequence of ones, print the one with the leftmost starting index, if there are several sequences with same length and starting index, select the sequence with the greater sum of its elements.
After you receive the last command "Clone them!" you should print the collected information in the following format:
"Best DNA sample {bestSequenceIndex} with sum: {bestSequenceSum}."
"{DNA sequence, joined by space}"
Input / Constraints
•	The first line holds the length of the sequences – integer in range [1…100];
•	On the next lines until you receive "Clone them!" you will be receiving sequences (at least one) of ones and zeroes, split by "!" (one or several).
 Output
The output should be printed on the console and consists of two lines in the following format:
"Best DNA sample {bestSequenceIndex} with sum: {bestSequenceSum}."
"{DNA sequence, joined by space}"

LadyBugs
You are given a field size and the indexes of ladybugs inside the field. After that on every new line until the "end" command is given, a ladybug changes its position either to its left or to its right by a given fly length. 
A command to a ladybug looks like this: "0 right 1". This means that the little insect placed on index 0 should fly one index to its right. If the ladybug lands on a fellow ladybug, it continues to fly in the same direction by the same fly length. If the ladybug flies out of the field, it is gone.
For example, imagine you are given a field with size 3 and ladybugs on indexes 0 and 1. If the ladybug on index 0 needs to fly to its right by the length of 1 (0 right 1) it will attempt to land on index 1 but as there is another ladybug there it will continue further to the right by additional length of 1, landing on index 2. After that, if the same ladybug needs to fly to its right by the length of 1 (2 right 1), it will land somewhere outside of the field, so it flies away.
If you are given ladybug index that does not have ladybug there, nothing happens. If you are given ladybug index that is outside the field, nothing happens. 
Your job is to create the program, simulating the ladybugs flying around doing nothing. At the end, print all cells in the field separated by blank spaces. For each cell that has a ladybug on it print '1' and for each empty cells print '0'. For the example above, the output should be '0 1 0'. 
Input
•	On the first line you will receive an integer - the size of the field
•	On the second line you will receive the initial indexes of all ladybugs separated by a blank space. The given indexes may or may not be inside the field range
•	On the next lines, until you get the "end" command you will receive commands in the format: "{ladybug index} {direction} {fly length}"
Output
•	Print the all cells within the field in format: "{cell} {cell} … {cell}"
•	If a cell has ladybug in it, print '1'
•	If a cell is empty, print '0' 
Constrains
•	The size of the field will be in the range [0 … 1000]
•	The ladybug indexes will be in the range [-2,147,483,647 … 2,147,483,647]
•	The number of commands will be in the range [0 … 100] 
•	The fly length will be in the range [-2,147,483,647 … 2,147,483,647]
